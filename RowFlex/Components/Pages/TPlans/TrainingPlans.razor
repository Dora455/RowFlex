@page "/training-plans"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using RowFlex.Data
@using RowFlex.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@using System.Security.Claims

<PageTitle>Training Plans</PageTitle>

<h3>Training Plans</h3>

<div class="row">
    <!-- Existing Training Plans Section -->
    <div class="col-md-8">
        <h4>Existing Training Plans</h4>
        @if (trainingPlans == null)
        {
            <p>Loading training plans...</p>
        }
        else if (!trainingPlans.Any())
        {
            <p>No training plans available.</p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var plan in trainingPlans)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <h5>@plan.Training?.Title</h5>
                            <p>Scheduled Date: @plan.TrainingDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <div>
                            <!-- Button for signing up -->
                            <button class="btn btn-primary me-2" @onclick="() => SignUp(plan.Id)">Sign Up</button>
                            
                            <!-- Button for coaches and admins to see participants -->
                            @if (IsAuthorized)
                            {
                                <button class="btn btn-info" @onclick="() => NavigateToPlanDetails(plan.Id)">View Participants</button>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
    </div>

    <!-- Add Training Section (Visible only for Coach or Admin roles) -->
    @if (IsAuthorized)
    {
        <div class="col-md-4">
            <h4>Add a Training Plan</h4>
            <div class="mb-3">
                <button class="btn btn-secondary w-100" @onclick="ShowExistingTrainings">Add Existing Training</button>
            </div>
            @if (isExistingTrainingsVisible)
            {
                <div>
                    <select @bind="selectedTrainingId" class="form-control">
                        <option value="">-- Select a Training --</option>
                        @foreach (var training in trainings)
                        {
                            <option value="@training.Id">@training.Title</option>
                        }
                    </select>
                    <div class="mt-3">
                        <label for="trainingDate">Training Date:</label>
                        <InputDate @bind-Value="trainingDate" class="form-control" id="trainingDate" />
                    </div>
                    <button class="btn btn-primary mt-3" @onclick="AddSelectedTrainingPlan">Add to Training Plan</button>
                </div>
            }

            <!-- Add New Training Plan Button -->
            <div class="mt-3">
                <button class="btn btn-primary w-100" @onclick="NavigateToAddTrainingPage">Add New Training Plan</button>
            </div>
        </div>
    }
</div>

@code {
    private List<Training> trainings = new();
    private List<TrainingPlan> trainingPlans = new();
    private int selectedTrainingId;
    private DateTime? trainingDate;
    private bool isExistingTrainingsVisible = false;
    private bool IsAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTrainingPlans();
        await CheckUserAuthorization();
        if (IsAuthorized)
        {
            await LoadTrainings();
        }
    }

    private async Task LoadTrainingPlans()
    {
        try
        {
            trainingPlans = await DbContext.TrainingPlans
                .Include(tp => tp.Training)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading training plans: {ex.Message}");
        }
    }

    private async Task LoadTrainings()
    {
        try
        {
            trainings = await DbContext.Trainings.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trainings: {ex.Message}");
        }
    }

    private async Task CheckUserAuthorization()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAuthorized = user.IsInRole("Coach") || user.IsInRole("Admin");
    }

    // Toggle visibility of the existing trainings section
    private void ShowExistingTrainings()
    {
        isExistingTrainingsVisible = !isExistingTrainingsVisible;
    }

    // Add the selected training plan to the database
    private async Task AddSelectedTrainingPlan()
    {
        if (selectedTrainingId != 0 && trainingDate.HasValue)
        {
            try
            {
                var training = await DbContext.Trainings.FindAsync(selectedTrainingId);
                if (training != null)
                {
                    var newTrainingPlan = new TrainingPlan
                    {
                        TrainingId = training.Id,
                        TrainingDate = trainingDate.Value
                    };
                    DbContext.TrainingPlans.Add(newTrainingPlan);
                    await DbContext.SaveChangesAsync();

                    // Refresh the training plans list
                    await LoadTrainingPlans();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding training plan: {ex.Message}");
            }
        }
    }

    // Navigate to the page for signing up
    private void NavigateToSignUp(int planId)
    {
        NavigationManager.NavigateTo($"/training-plans/{planId}/signup");
    }

    // Navigate to the page for viewing participants
    private void NavigateToPlanDetails(int planId)
    {
        NavigationManager.NavigateTo($"/training-plans/{planId}/details");
    }

    // Navigate to the page for adding a new training
    private void NavigateToAddTrainingPage()
    {
        NavigationManager.NavigateTo("/training-plans/add");
    }
    
    // Sign up the current user for the training plan
    private async Task SignUp(int planId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            try
            {
                var presence = new Presence
                {
                    UserId = userId,
                    TrainingPlanId = planId,
                    Date = DateTime.Now
                };

                DbContext.Presences.Add(presence);
                await DbContext.SaveChangesAsync();

                // Optionally, redirect after sign-up
                NavigationManager.NavigateTo($"/training-plans/{planId}/signup");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while signing up: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Sign-up failed: userId is null.");
        }
    }
}