@page "/training-plans/{planId:int}/signup"

@using RowFlex.Data
@using RowFlex.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims

<PageTitle>Sign Up</PageTitle>

<h3>Sign Up for Training</h3>

<div>
    @if (trainingPlan != null && trainingPlan.Training != null)
    {
        <h4>@trainingPlan.Training.Title</h4>
        <p>Scheduled Date: @trainingPlan.TrainingDate.ToString("MMM dd, yyyy")</p>

        <h5>Participants</h5>
        @if (participants == null || !participants.Any())
        {
            <p>No participants yet.</p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var participant in participants)
                {
                    <li class="list-group-item">@participant.User?.Name @participant.User?.Surname</li>
                }
            </ul>
        }

        <!-- Button to sign up -->
        <button class="btn btn-primary" @onclick="SignUp">Sign Up</button>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    [Parameter] public int planId { get; set; }

    private TrainingPlan trainingPlan;
    private List<Presence> participants;

    protected override async Task OnInitializedAsync()
    {
        await LoadTrainingPlan();
    }

    private async Task LoadTrainingPlan()
    {
        trainingPlan = null;
        participants = new List<Presence>();

        try
        {
            trainingPlan = await DbContext.TrainingPlans
                .Include(tp => tp.Training)
                .FirstOrDefaultAsync(tp => tp.Id == planId);

            if (trainingPlan != null)
            {
                participants = await DbContext.Presences
                    .Where(p => p.TrainingPlanId == planId)
                    .Include(p => p.User)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading the training plan: {ex.Message}");
        }
    }

    private async Task SignUp()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // Log userId and trainingPlan
        Console.WriteLine($"UserId: {userId}");
        Console.WriteLine($"TrainingPlanId: {trainingPlan?.Id}");

        if (userId != null && trainingPlan != null)
        {
            var presence = new Presence
            {
                UserId = userId,
                TrainingPlanId = trainingPlan.Id,
                Date = DateTime.Now
            };

            try
            {
                // Add the new presence to the DbContext
                DbContext.Presences.Add(presence);

                // Save changes to the database
                await DbContext.SaveChangesAsync();

                // Log success message
                Console.WriteLine("Sign-up successful!");

                // Refresh the participants list
                participants = await DbContext.Presences
                    .Where(p => p.TrainingPlanId == planId)
                    .Include(p => p.User)
                    .ToListAsync();
            }
            catch (Exception ex)
            {
                // Log any errors that occur during sign-up
                Console.WriteLine($"An error occurred while signing up: {ex.Message}");
            }
        }
        else
        {
            // Log if userId or trainingPlan is null
            Console.WriteLine("Sign-up failed: userId or trainingPlan is null.");
        }
    }
}