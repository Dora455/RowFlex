@page "/training-plans/{planId}/signup"
@using RowFlex.Data
@using RowFlex.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Sign up for Training</PageTitle>

<h3>Sign up for Training</h3>

@if (!canSignUp)
{
    <p>You cannot sign up for a training session that has already passed.</p>
}
else
{
    <button class="btn btn-primary" @onclick="SignUpForTraining">Sign Up</button>
}

@code {
    [Parameter] public int PlanId { get; set; }
    private TrainingPlan trainingPlan;
    private bool canSignUp = false;

    protected override async Task OnInitializedAsync()
    {
        // Fetch the TrainingPlan by its Id
        trainingPlan = await DbContext.TrainingPlans
            .Include(tp => tp.Training) // Make sure to include the related Training if needed
            .FirstOrDefaultAsync(tp => tp.Id == PlanId);

        if (trainingPlan != null)
        {
            // Check if the training session is today or in the future
            canSignUp = trainingPlan.TrainingDate >= DateTime.Now;
        }
    }

    private async Task SignUpForTraining()
    {
        if (trainingPlan == null || !canSignUp)
        {
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user != null && user.Identity.IsAuthenticated)
        {
            var userIdString = user.FindFirstValue(ClaimTypes.NameIdentifier); // Get the string userId

            if (!string.IsNullOrEmpty(userIdString)) // Ensure userIdString is not empty
            {
                // Check if the user is already signed up for the training
                var existingPresence = await DbContext.Presences
                    .FirstOrDefaultAsync(p => p.UserId == userIdString && p.TrainingId == trainingPlan.TrainingId);

                if (existingPresence == null)
                {
                    var presence = new Presence
                    {
                        UserId = userIdString, // Store userId as string
                        TrainingId = trainingPlan.TrainingId,
                        Date = DateTime.Now
                    };

                    DbContext.Presences.Add(presence);
                    await DbContext.SaveChangesAsync();
                    NavigationManager.NavigateTo($"/training-plans/{PlanId}");
                }
                else
                {
                    // Handle already signed up case
                    // Show a message or do something here
                }
            }
            else
            {
                // Handle case where userIdString is null or empty
            }
        }
    }
}
