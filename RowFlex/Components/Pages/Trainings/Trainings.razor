@page "/trainings"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using RowFlex.Models
@inject TrainingService TrainingService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>Trainings</PageTitle>

<h3>Saved Trainings</h3>

<div class="row">
    <!-- Trainings List Section -->
    <div class="col-md-8">
        @if (trainings.Any())
        {
            <ul class="list-group">
                @foreach (var training in trainings)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@training.Title</strong>
                            <p class="mb-0 text-muted">@training.TrainingType</p>

                            <!-- Wyświetlanie opisu w mniejszej czcionce -->
                            <p class="text-muted small">@training.Description</p>
                        </div>
                        <span class="badge bg-primary">@training.TrainingType</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">No saved trainings available.</p>
        }
    </div>

    <!-- Add Training Button Section (visible only to Coaches) -->
    <div class="col-md-4">
        <AuthorizeView Roles="Coach">
            <button class="btn btn-primary w-100 mb-2" @onclick="NavigateToAddTraining">Add Training</button>
        </AuthorizeView>
    </div>
</div>

@code {
    private List<Training> trainings = new();

    protected override async Task OnInitializedAsync()
    {
        // Pobieranie treningów z TrainingService
        trainings = await TrainingService.GetAllTrainingsAsync();
    }

    private void NavigateToAddTraining() => NavigationManager.NavigateTo("/trainings/add");
}
