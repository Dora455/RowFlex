@page "/club-coach-management"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using RowFlex.Models
@using RowFlex.Data
@inject ClubService clubService
@inject ClubGateway clubGateway

<h1>Club-Coach Management</h1>

@if (ClubCoaches == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Club Name</th>
            <th>Coach Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var clubCoach in ClubCoaches)
            {
                <tr>
                    <td>@clubCoach.Club.Name</td>
                    <td>@clubCoach.Coach.Name @clubCoach.Coach.Surname</td>
                    <td>
                        <button class="btn btn-danger" @onclick="(() => DeleteClubCoach(clubCoach.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Add New Club-Coach</h2>
    <EditForm Model="NewClubCoach" OnValidSubmit="AddClubCoach">
    <div class="form-group">
        <label for="ClubId">Select Club</label>
        <InputSelect id="ClubId" @bind-Value="NewClubCoach.ClubId" class="form-control">
            <option value="">-- Select Club --</option>
            @foreach (var club in Clubs)
                {
                    <option value="@club.Id">@club.Name</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="CoachId">Select Coach</label>
            <InputSelect id="CoachId" @bind-Value="NewClubCoach.CoachId" class="form-control">
                <option value="">-- Select Coach --</option>
                @foreach (var coach in Coaches)
                {
                    <option value="@coach.Id">@coach.Name @coach.Surname</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Add Club-Coach</button>
    </EditForm>
}

@code {
    private List<ClubCoach> ClubCoaches;
    private List<Club> Clubs;
    private List<User> Coaches;
    private ClubCoach NewClubCoach = new ClubCoach();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        ClubCoaches = await clubService.GetAllClubCoachesAsync();
        Clubs = await clubGateway.GetAllAsync();
        Coaches = await clubService.GetAllCoachesAsync();
    }

    private async Task AddClubCoach()
    {
        if (NewClubCoach.ClubId == 0 || string.IsNullOrEmpty(NewClubCoach.CoachId))
        {
            return;
        }

        await clubService.AddCoachToClubAsync(NewClubCoach);

        // Reset and reload data
        NewClubCoach = new ClubCoach();
        await LoadDataAsync();
    }

    private async Task DeleteClubCoach(int id)
    {

        Console.WriteLine("DeletingggggggggggDeletingggggggggggDeletingggggggggggDeletinggggggggggg");
        await clubService.RemoveCoachFromClubAsync(id);
        await LoadDataAsync();
    }
}
