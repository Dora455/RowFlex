@page "/AddEvent"
@using RowFlex.Models
@using RowFlex.Data
@inject DataBaseService DataBaseService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h2>Add Event</h2>
<div class="form-group mb-3">
    <label for="title" class="control-label"> Title </label>
    <input id="title" class="form-control" @bind="Event.Title" />
</div>
<div class="form-group mb-3">
    <label for="description" class="control-label">Description</label>
    <textarea id="description" class="form-control" @bind="Event.Description"></textarea>
</div>
<div class="form-group mb-3">
    <label for="start" class="control-label">Start Date</label>
    <input id="start" type="datetime-local" class="form-control" @bind="start" />
    <span asp-validation-for="Event.StartDate" class="text-danger"></span>
</div>

<div class="form-group mb-3">
    <label for="end" class="control-label">End Date (optional)</label>
    <input id="end" type="datetime-local" class="form-control" @bind="end" />
</div>
@* <div class="form-group mb-3">
<label asp-for="start" class="control-label">Start Date</label>
<input asp-for="start" type="datetime-local" class="form-control" />
<span asp-validation-for="Event.StartDate" class="text-danger"></span>
</div>

<div class="form-group mb-3">
<label asp-for="end" class="control-label">End Date (optional)</label>
<input asp-for="end" type="datetime-local" class="form-control" />
</div> *@

<button class="btn btn-primary" @onclick="(() => SubmitNews())">
    Submit<i class="bi bi-check-circle"></i>
</button>

@code {
    public Event Event;
    DateTime start = DateTime.UtcNow;
    DateTime? end;
    protected override async Task OnInitializedAsync()
    {
        Event = new Event();
    }
    public async Task SubmitNews()
    {
        Event.StartDate = start;
        if (end == null)
            Event.EndDate = start;
        else
            Event.EndDate = end.Value;
        await DataBaseService.AddEventAsync(Event);
        NavigationManager.NavigateTo("/");
    }
}
