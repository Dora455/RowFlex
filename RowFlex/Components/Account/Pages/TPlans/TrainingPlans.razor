@page "/training-plans"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using RowFlex.Data
@using RowFlex.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Training Plans</PageTitle>

<h3>Training Plans</h3>

<!-- Sekcja do wybrania istniejącego treningu -->
<h4>Select an Existing Training</h4>
<button class="btn btn-secondary" @onclick="ShowExistingTrainings">Add Existing Training</button>

@if (isExistingTrainingsVisible)
{
    @if (trainings.Any())
    {
        <div>
            <select @bind="selectedTrainingId" class="form-control">
                <option value="">-- Select a Training --</option>
                @foreach (var training in trainings)
                {
                    <option value="@training.Id">@training.Title</option>
                }
            </select>
            <div class="mt-3">
                <label for="trainingDate">Training Date:</label>
                <InputDate @bind-Value="trainingDate" class="form-control" id="trainingDate" />
            </div>
            <button class="btn btn-primary mt-3" @onclick="AddSelectedTrainingPlan">Add to Training Plan</button>
        </div>
    }
    else
    {
        <p>No existing trainings found.</p>
    }
}

<!-- Sekcja do dodania nowego treningu -->
<h4>Add a New Training</h4>
<button class="btn btn-primary" @onclick="NavigateToAddTrainingPage">Create New Training</button>

<!-- Sekcja do wyświetlenia planów treningowych -->
<h4>Training Plans</h4>
@if (trainingPlans.Any())
{
    <ul class="list-group">
        @foreach (var plan in trainingPlans)
        {
            <li class="list-group-item">
                <strong>@plan.Training?.Title</strong> - @plan.TrainingDate
            </li>
        }
    </ul>
}
else
{
    <p>No training plans available.</p>
}

@code {
    private List<Training> trainings = new();
    private List<TrainingPlan> trainingPlans = new();
    private int selectedTrainingId;
    private DateTime? trainingDate;
    private bool isExistingTrainingsVisible = false;

    // Załadowanie dostępnych treningów oraz planów treningowych
    protected override async Task OnInitializedAsync()
    {
        trainings = await DbContext.Trainings.ToListAsync();
        trainingPlans = await DbContext.TrainingPlans.Include(tp => tp.Training).ToListAsync();
    }

    // Pokazuje listę istniejących treningów
    private void ShowExistingTrainings()
    {
        isExistingTrainingsVisible = !isExistingTrainingsVisible;
    }

    // Dodaje wybrany trening do planu treningowego
    private async Task AddSelectedTrainingPlan()
    {
        if (selectedTrainingId != 0 && trainingDate.HasValue)
        {
            var training = await DbContext.Trainings.FindAsync(selectedTrainingId);
            if (training != null)
            {
                var newTrainingPlan = new TrainingPlan
                {
                    TrainingId = training.Id,
                    TrainingDate = trainingDate.Value
                };
                DbContext.TrainingPlans.Add(newTrainingPlan);
                await DbContext.SaveChangesAsync();

                // Załaduj ponownie listę planów treningowych po dodaniu nowego planu
                trainingPlans = await DbContext.TrainingPlans.Include(tp => tp.Training).ToListAsync();

                // Nawigacja na stronę planów treningowych
                NavigationManager.NavigateTo("/training-plans");
            }
        }
    }

    // Przekierowanie do strony dodawania nowego treningu
    private void NavigateToAddTrainingPage()
    {
        NavigationManager.NavigateTo("/training-plans/add");
    }
}
